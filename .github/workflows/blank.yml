# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a single command using the runners shell
    - name: Run a one-line script
      run: echo Hello, world!

    # Runs a set of commands using the runners shell
    - name: Run a multi-line script
      run: |
        echo Add other actions to build,
   import android.os.AsyncTask;pk_live_51MFLFAFwGRDrHkBSnPqA3A4ZtkaLttVznEyYbSWMzwibs50QXaePYWosMxjPNwrPHQ3JZAFwmK7ZPNHxP96AnNNZ00xcGGp85O


import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.Balance;

public class BalanceInquiryActivity extends AppCompatActivity {

    private static final String STRIPE_SECRET_KEY = "your_stripe_secret_key";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_balance_inquiry);

        // Initialize Stripe with your secret key
        Stripe.apiKey = STRIPE_SECRET_KEY;

        // Call AsyncTask to get balance
        new GetBalanceTask().execute();
    }

    private class GetBalanceTask extends AsyncTask<Void, Void, Balance> {

        @Override
        protected Balance doInBackground(Void... voids) {
            try {
                // Retrieve balance from Stripe
                return Balance.retrieve();
            } catch (StripeException e) {
                e.printStackTrace();
                return null;
            }
        }

        @Override
        protected void onPostExecute(Balance balance) {
            super.onPostExecute(balance);
            if (balance != null) {
                // Display balance
                Toast.makeText(BalanceInquiryActivity.this, "Your balance is: " + balance.getAvailable().get(0).getAmount() + " " + balance.getAvailable().get(0).getCurrency(), Toast.LENGTH_LONG).show();
            } else {
                // Handle error
                Toast.makeText(BalanceInquiryActivity.this, "Error retrieving balance", Toast.LENGTH_SHORT).show();
            }
        }
    }
}